/* --------------------------------------------------- Mixins */

/* --------------------------------------------------- Clearfix */

@mixin clearfix {
  *zoom: 1;
  &:before, &:after { display: table; line-height: 0; content: ''; clear: both; }
}

/* --------------------------------------------------- Media Queries */

@mixin mq($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);

  @if $value != null {
    @media (max-width: $value) { @content; }
  } @else {
    @media (max-width: $breakpoint) { @content; }
  }
}

/* --------------------------------------------------- Font Declaration */

@mixin font($family, $size: 1rem, $weight: 400, $line: 1.5em, $style: normal) {
  font-family: $family;
  font-style: $style;
  font-weight: $weight;
  font-size: $size;
  line-height: $line;
}

/* --------------------------------------------------- Border radius */

@mixin border-radius ($values) {
  background-clip: padding-box;
  border-radius: $values;
}

/* --------------------------------------------------- Box shadow */
@mixin box-shadow($offset, $blur, $color) {
  box-shadow: 0 $offset $blur $color;
  -moz-box-shadow: 0 $offset $blur $color;
  -webkit-box-shadow: 0 $offset $blur $color;
}

@mixin inner-box-shadow($offset, $blur, $color) {
  box-shadow: inset 0 $offset $blur $color;
  -moz-box-shadow: inset 0 $offset $blur $color;
  -webkit-box-shadow: inset 0 $offset $blur $color;
}

/* --------------------------------------------------- Vertical align */
@mixin horizontal-align {
  left: 50%;
  transform: translateX(-50%);
}
@mixin vertical-align {
  top: 50%;
  transform: translateY(-50%);
}
@mixin center-align {
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
@mixin bottom-align {
  top: 90%;
  transform: translateY(-100%);
}

/* --------------------------------------------------- Gradient */
@mixin background-gradient($start, $end) {
  background: linear-gradient(to bottom, $start 0%,$end 100%);
}

@mixin background-gradient-horizontal($start, $end) {
  background-image: -moz-linear-gradient(left, $start 0%, $end 100%);
  background-image: -webkit-gradient(linear, left top, right top, from($start), to($end));
}

@mixin background-gradient-diagonal($start, $end) {
  background: linear-gradient(45deg, $start 0%, $end 100%);
}

@mixin background-gradient-diagonal-important($start, $end) {
  background: linear-gradient(45deg, $start 0%, $end 100%) !important;
}

@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

@mixin gradient($type, $color-stops...) {
  @if $type == circle {
    $type: circle;
  } @else if is-direction($type) == false {
    $color-stops: ($type, $color-stops);
    $type: 180deg;
  }

  @if $type == circle {
    background: nth(nth($color-stops, 1), 1);
    background: radial-gradient($type, $color-stops);
  } @else {
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient($type, $color-stops);
    background: linear-gradient($type, $color-stops);
  }
}

/* --------------------------------------------------- Perspective */
@mixin perspective ($perspective) {
  perspective: $perspective;
  transform-style: preserve-3d;
}

/* --------------------------------------------------- Rotate */
@mixin rotate ($deg) {
  transform: rotate(#{$deg}deg);
}

/* --------------------------------------------------- Scale */
@mixin scale ($size) {
  transform: scale(#{$size});
}

/* --------------------------------------------------- Translate */
@mixin translate ($x, $y) {
  transform: translate($x, $y);
}

/* --------------------------------------------------- Filters */
// Filters. blur, grayscale, drop-shadow, sepia, brightness, contrast, hue-rotate, invert, saturate
@mixin filter ($filter, $decimal) {
  filter: $filter($decimal);
}

/* --------------------------------------------------- Transition */
@mixin transition ($transition, $delay: 0) {
  transition: $transition;
  @if $delay != 0 {
    transition-delay: $delay;
  }
}

/* --------------------------------------------------- Triangles */
@function triangle-direction($value) {
  $d: index((top, top left, left, bottom left, bottom, bottom right, right, top right), $value);

  @return $d;
}

@mixin triangle ($width, $height, $color, $direction) {
  width: 0;
  height: 0;
  border-style: solid;
  transform: rotate(360deg);

  @if ($direction == top) or ($direction == left) or ($direction == bottom) or ($direction == right) {
    $width: $width / 2;
  }

  @if triangle-direction($direction) != false {
    @if $direction == (top) {
      border-width: 0 $width $height $width;
      border-color: transparent transparent $color transparent;
    } @else if $direction == (top right) {
      border-width: 0 $width $height 0;
      border-color: transparent $color transparent transparent;
    } @else if $direction == (right) {
      border-width: $width 0 $width $height;
      border-color: transparent transparent transparent $color;
    } @else if $direction == (bottom right) {
      border-width: 0 0 $height $width;
      border-color: transparent transparent $color transparent;
    } @else if $direction == (bottom) {
      border-width: $height $width 0 $width;
      border-color: $color transparent transparent transparent;
    } @else if $direction == (bottom left) {
      border-width: $height 0 0 $width;
      border-color: transparent transparent transparent $color;
    } @else if $direction == (left) {
      border-width: $width $height $width 0;
      border-color: transparent $color transparent transparent;
    } @else if $direction == (top left) {
      border-width: $height $width 0 0;
      border-color: $color transparent transparent transparent;
    } @else {
      @warn "Direction must be set to top, top left, left, bottom left, bottom, bottom right, right, or top right";
    }
  }
}

/* --------------------------------------------------- Overlay */
@mixin overlay ($color, $opacity) {
  &:before {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    background: rgba($color, $opacity);
  }
}

/* --------------------------------------------------- Animation */
@mixin animation ($name, $duration: 1s, $timing: linear, $iteration: infinite, $delay: 0, $direction: normal, $fill: both ) {
  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: $iteration;
  animation-direction: $direction;
  animation-timing-function: $timing;
  animation-fill-mode: $fill;
  animation-delay: $delay;
}

// Keyframes
@mixin animation-keyframes ($name) {
  @keyframes #{$name} {
    @content;
  }
}

.transition {
  @include transition (all .5s cubic-bezier(0.645, 0.045, 0.355, 1.000));
}
